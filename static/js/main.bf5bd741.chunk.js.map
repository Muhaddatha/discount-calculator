{"version":3,"sources":["components/Form.js","components/DiscountSummary.js","components/Summaries.js","App.js","reportWebVitals.js","index.js"],"names":["elementId","Form","summaries","setSummaries","priceText","setPriceText","discountText","setDiscountText","onSubmit","e","preventDefault","console","log","pattern","replace","match","isNaN","alert","areInputsNumeric","price","discount","finalPrice","toFixed","id","className","htmlFor","placeholder","onChange","target","value","type","required","DiscountSummary","summary","aria-label","onClick","filter","el","Summaries","map","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf5bd741.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nlet elementId = 0;\r\n\r\nconst Form = ({summaries, setSummaries, priceText, setPriceText, discountText, setDiscountText}) => {\r\n\r\n    \r\n\r\n    //updates the price prop when it changes in the form\r\n    const priceHandler = (e) =>{\r\n        setPriceText(e.target.value);\r\n    }\r\n\r\n    //updates the discount prop when it changes in the form\r\n    const discountHandler = (e) => {\r\n        setDiscountText(e.target.value);\r\n    }\r\n\r\n    //This function is called when the form is submitted\r\n    const formHandler = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"Form submit button clicked\");\r\n        \r\n        console.log(\"Form values -> priceText: \" + priceText + \" / dicountText:  \" + discountText);\r\n\r\n        \r\n        \r\n        if(areInputsNumeric()){\r\n            \r\n            console.log(\"The id is: \" + elementId);\r\n            setSummaries([\r\n                ...summaries, {price: priceText, discount: discountText, finalPrice: (priceText*(1-discountText/100)).toFixed(2), id: elementId}\r\n            ]);\r\n\r\n            elementId++;\r\n            setPriceText(\"\");\r\n            setDiscountText(\"\");\r\n        }\r\n        else{\r\n            console.log(\"Inputs are not valid.\");\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    //validates form inputs\r\n    function areInputsNumeric(){\r\n\r\n        console.log(\"Checking if inputs are valid...\");\r\n        \r\n        //pattern checks for float values\r\n        let pattern = /[+]?([0-9]*[.])?[0-9]+/;\r\n\r\n        discountText.replace('%', '');\r\n        priceText.replace('$', '');\r\n\r\n        if(!(priceText.match(pattern) && !isNaN(priceText) && priceText > 0)){\r\n            console.log(\"Price input is not valid.\");\r\n            alert(\"Please enter a valid price without the dollar sign.\");\r\n            return false;\r\n        }\r\n        else if(!(discountText.match(pattern) && !isNaN(discountText) && discountText <= 100 && discountText >= 0 )){\r\n            console.log(\"Discount rate is not valid.\");\r\n            //alert\r\n            alert(\"Please enter a valid discount percentage between 0 and 100 without the percent(%) sign.\");\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    return(\r\n\r\n        <form onSubmit={formHandler}>\r\n\r\n            <div className=\"input\">\r\n                <div className=\"input-header\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    <label htmlFor=\"original-price-input\">Price</label>\r\n                </div>\r\n                \r\n                <input placeholder=\"Price...\" onChange={priceHandler} value={priceText} type=\"text\" id=\"original-price-input\" required/>\r\n\r\n            </div>\r\n            \r\n            \r\n            <div className=\"input\">\r\n                <div className=\"input-header\">\r\n                    <i className=\"fas fa-percentage\"></i>\r\n                    <label htmlFor=\"discount-rate-input\">Discount rate</label>\r\n                </div>\r\n                \r\n                <input placeholder=\"Discount percentage...\" onChange={discountHandler} value={discountText} type=\"text\" id=\"discount-rate-input\" required/>\r\n\r\n            </div>\r\n            \r\n\r\n            <input type=\"submit\" id=\"calculate-btn\" value=\"Calculate\" />\r\n            \r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\"\r\n\r\n//Handles individual items in the summary container, creates and deletes them\r\nconst DiscountSummary = ({summary, setSummaries, summaries}) => {\r\n\r\n    //This function is called whenever an item is being deleted\r\n    const deleteHandler = () => {\r\n        console.log(\"Delete button clicked\");\r\n        console.log(\"Item to be deleted: \" + summary);\r\n        \r\n        //filtering the target list item out of the state\r\n        setSummaries(summaries.filter((el) => el.id !== summary.id));\r\n    }\r\n\r\n\r\n    return(\r\n\r\n        <div className=\"summary-card\">\r\n            <p className=\"price-to-pay\">\r\n               Price after discount: ${summary.finalPrice}\r\n            </p>\r\n\r\n            <p>\r\n                Original Price: ${summary.price}\r\n                <br></br>\r\n                Discount Rate: {summary.discount}%\r\n            </p>\r\n\r\n            <input type=\"button\" className=\"btn-close\" aria-label=\"close\" onClick={deleteHandler} value=\"Delete\"></input>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DiscountSummary;","import React from \"react\";\r\nimport DiscountSummary from \"./DiscountSummary\"\r\n\r\nconst Summaries = ({summaries, setSummaries}) => {\r\n    return(\r\n        <div id=\"summary-container\">\r\n            <ul className=\"summary-list\">\r\n                {/* mapping a summary to a list element */}\r\n                {summaries.map(summary => (\r\n                    <DiscountSummary key={summary.id} summaries={summaries} setSummaries={setSummaries} summary={summary} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Summaries;","import React, {useState} from \"react\";\r\nimport './normalize.css';\r\nimport './bootstrap.min.css';\r\nimport './App.css';\r\nimport Form from \"./components/Form\";\r\nimport Summaries from \"./components/Summaries\";\r\n\r\nfunction App() {\r\n\r\n  //variables used to store the state of the elements\r\n  const [priceText, setPriceText] = useState(\"\");\r\n  const [discountText, setDiscountText] = useState(\"\"); \r\n  //array that holds all the calculations\r\n  const [summaries, setSummaries] = useState([]);\r\n\r\n  return (\r\n    <div className=\"App\"> \r\n      {/* form components manipulates the data that will be appended to the summaries\r\n      container. */}\r\n      <Form summaries={summaries} setSummaries={setSummaries} priceText={priceText} setPriceText={setPriceText} discountText={discountText} setDiscountText={setDiscountText}/>\r\n\r\n      {/* All calculation summaries are appended here. */}\r\n      <Summaries summaries={summaries} setSummaries={setSummaries} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}